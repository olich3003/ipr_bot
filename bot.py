import asyncio
import time
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from functions import *

TOKEN = '5950027811:AAEC9Yv3a5ZiFIBQT8i6ADu8dlezLb1pDL8'

bot = AsyncTeleBot(TOKEN)


@bot.message_handler(commands=['start'])
async def start(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üìÖ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –¥–∞—Ç—É")
    btn2 = types.KeyboardButton("üóì –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏")
    btn3 = types.KeyboardButton("üì£ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏")
    btn4 = types.KeyboardButton("ü§ì –¢–æ–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤ –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏")
    btn5 = types.KeyboardButton("üîù –¢–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏")
    keyboard.add(btn1)
    keyboard.add(btn2)
    keyboard.add(btn3)
    keyboard.add(btn4)
    keyboard.add(btn5)
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é', reply_markup=keyboard)


@bot.message_handler(content_types=["text"])
async def message_reply(message):
    format = '%d-%m-%Y'
    if message.text == "üìÖ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –¥–∞—Ç—É":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ú–µ–Ω—é")
        keyboard.add(btn1)
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ \n \'–¥–¥-–º–º-–≥–≥–≥–≥\'", reply_markup=keyboard)
    elif message.text == "üóì –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ú–µ–Ω—é")
        keyboard.add(btn1)
        await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–≤–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ \n \'–¥–¥-–º–º-–≥–≥–≥–≥ –¥–¥-–º–º-–≥–≥–≥–≥\'",
                               reply_markup=keyboard)
    elif message.text == "üì£ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ú–µ–Ω—é")
        keyboard.add(btn1)
        await bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–ü–æ–ª–∏—Ç–∏–∫–∞, –û–±—â–µ—Å—Ç–≤–æ, –ù–∞—É–∫–∞, –≠–∫–æ–Ω–æ–º–∏–∫–∞) –∏ –¥–≤–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ \n \'–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–¥-–º–º-–≥–≥–≥–≥ –¥–¥-–º–º-–≥–≥–≥–≥\'",
                               reply_markup=keyboard)
    elif message.text == "ü§ì –¢–æ–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä–æ–≤ –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ú–µ–Ω—é")
        keyboard.add(btn1)
        await bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ \'–ö–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä—ã\' –∏ –¥–≤–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ \n \'–ö–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä—ã –¥–¥-–º–º-–≥–≥–≥–≥ –¥–¥-–º–º-–≥–≥–≥–≥\'",
                               reply_markup=keyboard)
    elif message.text == "üîù –¢–æ–ø –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏":
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ú–µ–Ω—é")
        keyboard.add(btn1)
        await bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ \'–¢–æ–ø\' –∏ –¥–≤–µ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ \n \'–¢–æ–ø –¥–¥-–º–º-–≥–≥–≥–≥ –¥–¥-–º–º-–≥–≥–≥–≥\'",
                               reply_markup=keyboard)
    elif message.text == "–ú–µ–Ω—é":
        await start(message)
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ú–µ–Ω—é")
        keyboard.add(btn1)
        text = ''
        try:
            dates = message.text.split(' ')

            ans = []
            if len(dates) == 2:
                if dt.datetime.strptime(dates[0], format) + dt.timedelta(days=30) < dt.datetime.strptime(dates[1],
                                                                                                         format):
                    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –ø–æ–º–µ–Ω—å—à–µ", reply_markup=keyboard,
                                           parse_mode='Markdown')
                    return
                ans = await get_agg_news(dates[0], dates[1])

            elif len(dates) == 1:
                ans = await get_agg_news(dates[0], dates[0])
            elif len(dates) == 3:
                if (dt.datetime.strptime(dates[1], format) + dt.timedelta(days=30)) < dt.datetime.strptime(dates[2],
                                                                                                           format):
                    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –ø–æ–º–µ–Ω—å—à–µ", reply_markup=keyboard,
                                           parse_mode='Markdown')
                    return
                if dates[0] == '–ö–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä—ã':
                    text = await get_top_commentators(dates[1], dates[2])
                    await bot.send_message(message.chat.id, text, reply_markup=keyboard, parse_mode='Markdown')
                    return
                elif dates[0] == '–¢–æ–ø':
                    ans = await get_agg_news(dates[1], dates[2])
                    ans = sorted(ans, key=lambda x: -int(x[2].split(' ')[1]))[:5]
                else:
                    ans = await get_sections(dates[0], dates[1], dates[2])
            counter = 0
            if len(ans) == 0:
                await bot.send_message(message.chat.id, "–ù–æ–≤–æ—Å—Ç–∏ –∑–∞ —ç—Ç–æ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –æ—Ç—Å—É—Ç—Å–≤—É—é—Ç", reply_markup=keyboard,
                                       parse_mode='Markdown')
                return
            for (name, ref, rating, comments) in ans:
                text += '*–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏*: {} \n *–°—Å—ã–ª–∫–∞*: {} \n'.format(name, ref)
                counter += 1
                if counter % 10 == 0:
                    await bot.send_message(message.chat.id, text, reply_markup=keyboard, parse_mode='Markdown')
                    text = ''
            if counter % 10 > 0:
                await bot.send_message(message.chat.id, text, reply_markup=keyboard, parse_mode='Markdown')
        except:
            await bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é –∑–∞–ø—Ä–æ—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë", reply_markup=keyboard)


async def main():
    await asyncio.gather(bot.infinity_polling(timeout=120))


# Run
if __name__ == '__main__':
    while True:
        try:
            asyncio.run(main())
        except Exception:
            time.sleep(3)
